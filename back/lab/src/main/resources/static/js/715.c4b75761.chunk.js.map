{"version":3,"file":"static/js/715.c4b75761.chunk.js","mappings":"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","sources":["api/chatApi.js","components/myPage/myChat/ChatList.js","components/myPage/myChat/ChatMessage.js","components/myPage/myChat/ChatInput.js","components/myPage/myChat/ChatWindow.js","pages/myPage/chat/MyChatPage.js"],"sourcesContent":["import axios from 'axios';\r\nexport const API_SERVER_HOST = 'http://localhost:8282';\r\n\r\nconst host = `${API_SERVER_HOST}/chat`;\r\n\r\n// 작성자가 게시글 작성 시 자동으로 채팅방 생성, 입장\r\nexport const postCreateRoom = async (userId, title, createRequest) => {\r\n  const res = await axios.post(`${host}/room/create`, createRequest, {\r\n    params: { userId, title }\r\n  });\r\n  return res.data;\r\n};\r\n\r\n// 특정 채팅방 삭제\r\nexport const deleteChatRoom = async (roomId) => {\r\n  const res = await axios.delete(`${host}/room/delete/${roomId}`);\r\n  return res.data;\r\n};\r\n\r\n// 채팅 기록 조회\r\nexport const getChatHistory = async (roomId) => {\r\n  const res = await axios.get(`${host}/room/history/${roomId}`);\r\n  return res.data;\r\n};\r\n\r\n// 유저의 모든 채팅방 목록 반환\r\nexport const getChatRoom = async (userId) => {\r\n  const res = await axios.get(`${host}/rooms`, { params: { userId } });\r\n  return res.data;\r\n};\r\n\r\n// 공동구매 채팅방의 유저 조회(참여하기 표시)\r\nexport const chatUserInfoBuy = async (buyNo) => {\r\n  const res = await axios.get(`${host}/room/buy/get`, {\r\n    params: { buyNo }\r\n  });\r\n  return res.data;\r\n};\r\n\r\n// 공동구매 채팅방 입장(참여)\r\nexport const enterChatRoomBuy = async (formData) => {\r\n  const response = await axios.post(`${host}/room/buy/enter`, formData);\r\n      return response.data;\r\n};\r\n\r\n// 공동구매 채팅방 퇴장(참여x)\r\nexport const exitChatRoomBuy = async (formData) => {\r\n  const response = await axios.post(`${host}/room/buy/exit`, formData);\r\n      return response.data;\r\n};\r\n\r\n// 동네모임 채팅방의 유저 조회(참여하기 표시)\r\nexport const chatUserInfoTeam = async (teamNo) => {\r\n  const res = await axios.get(`${host}/room/team/get`, {\r\n    params: { teamNo }\r\n  });\r\n  return res.data;\r\n};\r\n\r\n// 동네모임 채팅방 입장(참여)\r\nexport const enterChatRoomTeam = async (formData) => {\r\n  const response = await axios.post(`${host}/room/team/enter`, formData);\r\n      return response.data;\r\n};\r\n\r\n// 동네모임 채팅방 퇴장(참여x)\r\nexport const exitChatRoomTeam = async (formData) => {\r\n  const response = await axios.post(`${host}/room/team/exit`, formData);\r\n      return response.data;\r\n};\r\n\r\n\r\n\r\n\r\n\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { getChatRoom } from '../../../api/chatApi';\r\n\r\nconst ChatList = ({ onSelectChat }) => {\r\n  const [ chatRooms, setChatRooms ] = useState('');\r\n  const loginInfo = useSelector((state) => state.loginSlice);\r\n  const id = loginInfo.id;\r\n\r\n  useEffect(()=>{\r\n    getChatRoom(id).then((response) => {\r\n      setChatRooms(response);\r\n    });\r\n  }, [id]);\r\n\r\n\r\nconst getNonEmptyFieldsWithText = (room) => {\r\n  const fields = [];\r\n\r\n  if (room.buyNo !== null) {\r\n      fields.push({ value: room.buyNo, text: '공동구매' });\r\n  }\r\n  if (room.teamNo !== null) {\r\n      fields.push({ value: room.teamNo, text: '동네모임' });\r\n  }\r\n  if (room.marketNo !== null) {\r\n      fields.push({ value: room.marketNo, text: '동네장터' });\r\n  }\r\n  if (room.roomNo !== null) {\r\n      fields.push({ value: room.roomNo, text: '자취방쉐어' });\r\n  }\r\n\r\n  return fields;\r\n};\r\n\r\n\r\n  return (\r\n    <div className=\"h-full\">\r\n      {chatRooms.data && chatRooms.data.length > 0 ? (\r\n      chatRooms.data.map((room) => \r\n\r\n        <div key={room.roomId} className=\"py-7 px-5 cursor-pointer hover:bg-gray-100 border-b flex items-center\" onClick={() => onSelectChat(room)}>\r\n          <img src=\"https://via.placeholder.com/40\" alt=\"...\" className=\"w-10 h-10 rounded-full mr-4\" />\r\n          <div>\r\n            <h2 className=\"text-lg font-bold\">{room.title}</h2>\r\n            <p className=\"text-sm text-gray-500\">채팅방 마지막 메세지</p>\r\n          </div>\r\n        </div>\r\n        \r\n      )\r\n    )\r\n    :\r\n    (\r\n      <div className=\"p-7 flex items-center\">\r\n        참여 중인 채팅방이 없습니다\r\n      </div>\r\n    )\r\n    }\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatList;\r\n","import React from 'react';\r\n\r\nconst ChatMessage = ({ message }) => {\r\n  return (\r\n    <div>\r\n      {message.sender === 'me'? (\r\n        <div className=\"flex justify-end\">\r\n          <div className=\"px-4 py-2 m-2 rounded-3xl text-lg bg-mainColor text-white shadow\">{message.text}</div>\r\n        </div>\r\n      )\r\n      :\r\n      (\r\n        <div className=\"flex justify-start items-center ml-2\">\r\n          <img src=\"https://via.placeholder.com/40\" alt=\"Profile\" className=\"rounded-full w-10 h-10\" />\r\n          <div className=\"px-4 py-2 m-2 rounded-3xl text-lg bg-white text-black shadow\">{message.text}</div>\r\n        </div>\r\n      )\r\n    }\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatMessage;\r\n","import React, { useState } from 'react';\r\n\r\nconst ChatInput = ({ onSend }) => {\r\n  const [message, setMessage] = useState('');\r\n\r\n  const handleSend = (e) => {\r\n    e.preventDefault();\r\n    if (message.trim()) {\r\n      onSend(message);\r\n      setMessage('');\r\n    }\r\n  };\r\n\r\n  const onKeyDown = (e) => {\r\n    if(e.key === 'Enter'){\r\n      handleSend(e);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <form onSubmit={handleSend} className=\"flex p-4 bg-white border-t rounded-b\">\r\n      <input\r\n        type=\"text\"\r\n        value={message}\r\n        onChange={(e) => setMessage(e.target.value)}\r\n        onKeyDown={onKeyDown}\r\n        className=\"flex-1 p-2 border rounded-3xl text-base\"\r\n        placeholder=\"메시지를 입력하세요\"\r\n      />\r\n      <button type=\"submit\" className=\"ml-2 p-2 bg-teal-400 hover:bg-teal-500 text-white rounded-lg text-base\">\r\n        보내기\r\n      </button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default ChatInput;\r\n","import React from 'react';\r\nimport ChatMessage from './ChatMessage';\r\nimport ChatInput from './ChatInput';\r\nimport { useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nconst initState = {\r\n  id: 0,\r\n  text: '',\r\n  sender: '',\r\n};\r\n\r\nconst ChatWindow = ({ chat }) => {\r\n  const navigate = useNavigate();\r\n  //const [messages, setMessages] = useState(initState);\r\n  const [messages, setMessages] = useState([\r\n    { id: 1, text: '안녕!', sender: 'other' },\r\n    { id: 2, text: '오랜만이야', sender: 'other' },\r\n    { id: 3, text: '잘 지내?', sender: 'me' },\r\n  ]);\r\n  const [isSidebarOpen, setIsSidebarOpen] = useState(false);\r\n\r\n  const handleSend = (message) => {\r\n    setMessages([...messages, { id: messages.length + 1, text: message, sender: 'me' }]);\r\n  };\r\n\r\n  const toggleSidebar = () => {\r\n    setIsSidebarOpen(!isSidebarOpen);\r\n  };\r\n\r\n  const getRoomInfo = (data) => {\r\n    if (data.buyNo) return { label: '공동구매', value: data.buyNo };\r\n    if (data.teamNo) return { label: '동네모임', value: data.teamNo };\r\n    if (data.marketNo) return { label: '동네장터', value: data.marketNo };\r\n    if (data.roomNo) return { label: '자취방쉐어', value: data.roomNo };\r\n    return { label: '-', value: '' };\r\n  };\r\n\r\n  const { label, value } = getRoomInfo(chat);\r\n\r\n  //채팅방 제목 클릭시 해당 게시물로 이동\r\n  const handleClickTitle = (label,value) => {\r\n    if(label === '공동구매'){\r\n      navigate(`/buy/read/${value}`);\r\n    }\r\n    else if(label === '동네모임'){\r\n      navigate(`/team/read/${value}`);\r\n    }\r\n    else if(label === '동네장터'){\r\n      navigate(`/market/read/${value}`);\r\n    }\r\n    else if(label === '자취방쉐어'){\r\n      navigate(`/shareRoom/read/${value}`);\r\n    }\r\n    else{\r\n      alert('삭제된 게시물입니다');\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"flex flex-col h-full\">\r\n      <div className=\"flex items-center justify-between p-4 bg-gray-600 text-white rounded-t\">\r\n        <div className=\"text-sm flex items-center\">\r\n          <span className=\"bg-mainColor px-2 py-1 mr-1 rounded-2xl\">{label}</span>\r\n          <span className=\"hover:underline cursor-pointer\">{chat.title}</span>\r\n        </div>\r\n        <div className=\"text-sm flex items-center\">\r\n        <span className=\"bg-white px-2 py-1 ml-1 rounded text-black font-bold\">2 / 3</span>\r\n          <button \r\n            onClick={toggleSidebar} \r\n            className=\"ml-2 bg-gray-700 hover:bg-gray-500 text-white rounded-full w-8 h-8 flex items-center justify-center\">\r\n            ☰\r\n          </button>\r\n        </div>\r\n      </div>\r\n      <div className=\"flex-1 overflow-y-auto p-2 bg-slate-100 relative overflow-x-hidden\">\r\n        {messages.map((message) => (\r\n          <ChatMessage key={message.id} message={message} />\r\n        ))}\r\n        {/* 참여자 목록 사이드바 */}\r\n        <div\r\n          className={`absolute top-0 right-0 h-full bg-white shadow-lg transition-transform transform ${\r\n            isSidebarOpen ? 'translate-x-0' : 'translate-x-full'\r\n          } w-1/3`}\r\n        >\r\n          <div className=\"p-4 border-b\">\r\n            <h2 className=\"text-base font-bold\">참여자 목록</h2>\r\n            <button \r\n              onClick={toggleSidebar} \r\n              className=\"absolute top-2 right-2 text-gray-600 hover:text-gray-900\">\r\n              &times;\r\n            </button>\r\n          </div>\r\n          <div className=\"p-4 text-base\">\r\n            <ul>\r\n              <li>참여자 1</li>\r\n              <li>참여자 2</li>\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <ChatInput onSend={handleSend} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatWindow;\r\n","import { useState } from 'react';\r\n\r\nimport ChatList from '../../../components/myPage/myChat/ChatList';\r\nimport ChatWindow from '../../../components/myPage/myChat/ChatWindow';\r\n\r\nconst MyChatPage = () => {\r\n  const [selectedChat, setSelectedChat] = useState(null);\r\n\r\n  const handleChatSelect = (chat) => {\r\n    setSelectedChat(chat);\r\n  };\r\n\r\n  return (\r\n    <div className=\"text-xl flex-grow h-screen flex w-4/5\">\r\n      <div className=\"bg-white w-full rounded h-4/5 shadow-md flex flex-col\">\r\n\r\n        <div className=\"flex-grow flex flex-col h-full\">\r\n          <div id=\"chatall\" className=\"flex-grow flex h-0\">\r\n            <div className=\"w-1/3 overflow-y-auto no-scrollbar\">\r\n              <ChatList onSelectChat={handleChatSelect} />\r\n            </div>\r\n            <div className=\"w-2/3\">\r\n              {selectedChat ? (\r\n                <ChatWindow chat={selectedChat}/>\r\n              ) : (\r\n                <div id=\"chatwin\" className=\"flex items-center justify-center h-full border-l border-gray-300\">\r\n                  <p className=\"text-gray-600\">채팅 목록 중 채팅할 방을 선택하세요</p>\r\n                </div>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n      </div>\r\n    </div>\r\n\r\n  );\r\n};\r\n\r\nexport default MyChatPage;\r\n"],"names":["host","concat","postCreateRoom","async","userId","title","createRequest","axios","post","params","data","getChatRoom","get","chatUserInfoBuy","buyNo","enterChatRoomBuy","formData","exitChatRoomBuy","chatUserInfoTeam","teamNo","enterChatRoomTeam","exitChatRoomTeam","_ref","onSelectChat","chatRooms","setChatRooms","useState","id","useSelector","state","loginSlice","useEffect","then","response","_jsx","className","children","length","map","room","_jsxs","onClick","src","alt","roomId","message","sender","text","onSend","setMessage","handleSend","e","preventDefault","trim","onSubmit","type","value","onChange","target","onKeyDown","key","placeholder","chat","useNavigate","messages","setMessages","isSidebarOpen","setIsSidebarOpen","toggleSidebar","label","marketNo","roomNo","ChatMessage","ChatInput","MyChatPage","selectedChat","setSelectedChat","ChatList","ChatWindow"],"sourceRoot":""}