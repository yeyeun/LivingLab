{"version":3,"file":"static/js/3278.f069b58c.chunk.js","mappings":"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","sources":["hooks/useCustomQna.js","components/community/qna/ReadComponent.js","pages/community/qna/ReadPage.js"],"sourcesContent":["//커뮤니티 게시판 커스텀훅\r\nimport { createSearchParams, useNavigate, useSearchParams } from \"react-router-dom\";\r\n  \r\n  const getNum = (param, defaultValue) => {\r\n    if (!param) {\r\n      return defaultValue;\r\n    }\r\n    return parseInt(param);\r\n  };\r\n  \r\n  const useCustomQna = () => {\r\n    const navigate = useNavigate();\r\n    const [queryParams] = useSearchParams();\r\n    const page = getNum(queryParams.get(\"page\"), 1);\r\n    const size = getNum(queryParams.get(\"size\"), 10);\r\n    const queryDefault = createSearchParams({ page, size }).toString();\r\n  \r\n    const moveToList = (pageParam) => {\r\n      let queryStr = \"\";\r\n      if (pageParam) {\r\n        const pageNum = getNum(pageParam.page, 1);\r\n        const sizeNum = getNum(pageParam.size, 10);\r\n        queryStr = createSearchParams({\r\n          page: pageNum,\r\n          size: sizeNum,\r\n        }).toString();\r\n      } else {\r\n        queryStr = queryDefault;\r\n      }\r\n      navigate({ pathname: `../qna/list`, search: queryStr });\r\n    };\r\n  \r\n    const moveToModify = (num) => {\r\n      console.log(queryDefault);\r\n      navigate({ pathname: `../qna/modify/${num}`, search: queryDefault }); // 수정시에 기존의 쿼리문자열을 유지하기 위해\r\n    };\r\n  \r\n    const moveToRead = (num) => {\r\n      console.log(queryDefault);\r\n      navigate({ pathname: `../qna/read/${num}`, search: queryDefault });\r\n    };\r\n  \r\n    const moveToAdd = () => {\r\n      navigate({ pathname: `../qna/add`, search: '' });\r\n    };\r\n  \r\n    return { moveToList, moveToModify, moveToRead, moveToAdd, page, size };\r\n  };\r\n\r\n  export default useCustomQna;\r\n  ","import ReplyComponent from \"../../common/ReplyComponent\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { useSelector } from 'react-redux';\r\nimport { API_SERVER_HOST, getOneQna, deleteOne, increaseLike, decreaseLike } from \"../../../api/communityApi\";\r\nimport { addReply, getList } from \"../../../api/replyApi\";\r\nimport { likeComm, unlikeComm, likeInfoComm } from '../../../api/likeApi';\r\nimport useCustomQna from \"../../../hooks/useCustomQna\";\r\nimport ResultModal from \"../../common/ResultModal\";\r\nimport emptyheart from '../../../resources/images/heart_empty.png';\r\nimport fullheart from '../../../resources/images/heart_full.png';\r\nimport InfoModal from '../../common/InfoModal';\r\n\r\nconst initState = {\r\n    commNo: 0,\r\n    title: '',\r\n    content: '',\r\n    commHit: 0,\r\n    commCategory: '',\r\n    uploadFileNames: []\r\n};\r\n\r\nconst initState2 = {\r\n    likeNo: 0,\r\n    id: 0,\r\n    commNo: 0,\r\n};\r\n\r\nconst host = API_SERVER_HOST;\r\n\r\nconst ReadComponent = ({commNo}) => {\r\n    const [result, setResult] = useState(null); //게시글 삭제 모달창\r\n    const [addResultModal, setAddResultModal] = useState(null); //댓글 등록 모달창\r\n    const [qna, setQna] = useState(initState); //해당 게시물 내용\r\n    const [input, setInput] = useState(''); //댓글 내용\r\n    const [replies, setReplies] = useState([]);\r\n    const { moveToList, moveToModify } = useCustomQna();\r\n    const loginInfo = useSelector((state) => state.loginSlice);\r\n    const id = loginInfo?.id;\r\n    const email = loginInfo?.email;\r\n    const [isLiked, setIsLiked] = useState({}); // true/false에 따라 하트 이미지 변경\r\n    const [like, setLike] = useState(initState2);\r\n    const [info, setInfo] = useState(null); //좋아요 모달창 문구 설정\r\n\r\n    useEffect(() => {\r\n        getOneQna(commNo).then(data => {\r\n            console.log(data)\r\n            setQna(data)\r\n        })\r\n    }, [commNo, info])\r\n\r\n    //댓글 리스트 호출\r\n    useEffect(() => {\r\n        getList(commNo).then(data => {\r\n            setReplies(data);\r\n        });\r\n    }, [commNo, addResultModal]);\r\n\r\n    //좋아요 정보 조회\r\n    useEffect(() => {\r\n        if (email) {\r\n          //로그인시에만 실행\r\n          likeInfoComm(commNo, id).then((data) => {\r\n            setLike(data);\r\n            if (data) {\r\n              //data가 있으면 이미 좋아요 누른글\r\n              setIsLiked(true);\r\n            } else {\r\n              setIsLiked(false);\r\n            }\r\n          });\r\n        }\r\n      }, [email, info]);\r\n\r\n    const handleClickDelete = (e) => {\r\n        deleteOne(commNo);\r\n        setResult(\"게시글이 삭제되었습니다\");\r\n    }\r\n\r\n    const closeModal = () => {\r\n        setResult(null);\r\n        moveToList();\r\n    }\r\n\r\n    //좋아요 관련 모달창\r\n    const closeInfoModal = () => {\r\n        setInfo(null);\r\n    };\r\n\r\n    //ReplyComponent에서 보낸 메세지값 처리\r\n    const setModalMessage = (message) => {\r\n        setAddResultModal(message);\r\n    }\r\n\r\n    // 댓글 등록\r\n    const handleClickAddReply = () => {\r\n        if(!email){\r\n            setAddResultModal(\"로그인 후 이용할 수 있습니다\");\r\n            return;\r\n        }\r\n        if(!input){\r\n            setAddResultModal(\"내용을 입력해주세요\");\r\n            return;\r\n        }\r\n        const newComment = {\r\n            id: id,\r\n            content: input,\r\n            commNo : commNo\r\n        };\r\n        addReply(newComment);\r\n        setAddResultModal(\"댓글이 등록되었습니다\");\r\n        setInput('');\r\n    };\r\n\r\n    //좋아요 클릭 시\r\n    const handleLikeClick = () => {\r\n        if (!email) {\r\n          setInfo('로그인 후 이용 가능합니다');\r\n          return;\r\n        }\r\n        if (isLiked) {\r\n          unlikeComm(like.likeNo);\r\n          decreaseLike(commNo);\r\n          setInfo('좋아요 목록에서 삭제되었습니다');\r\n        } else {\r\n          const data = {\r\n            id: id,\r\n            commNo: commNo,\r\n          };\r\n          likeComm(data);\r\n          increaseLike(commNo);\r\n          setInfo('좋아요 목록에 추가되었습니다');\r\n        }\r\n        setIsLiked(!isLiked);\r\n      };\r\n\r\n    return (\r\n        <div className=\"relative p-4\">\r\n            <div className=\"max-w-5xl mx-auto\">\r\n                <div className=\"mt-3 w-full rounded-b flex flex-col justify-between leading-normal\">\r\n                    <div>\r\n                        {result && <ResultModal title={'알림'} content={`${result}`} callbackFn={closeModal} />}\r\n                        <div className=\"mb-2\">\r\n                            <span className=\"text-slate-900 text-base bg-teal-200 rounded-3xl px-2 pt-0.5 pb-1\">\r\n                                {qna.commCategory === '1' && '부동산'}\r\n                                {qna.commCategory === '2' && '인테리어'}\r\n                                {qna.commCategory === '3' && '할인정보'}\r\n                                {qna.commCategory === '4' && '기타'}\r\n                            </span>\r\n                        </div>\r\n                        <h1 className=\"text-gray-900 font-bold text-3xl\">{qna.title}</h1>\r\n                        <div className=\"py-5 text-sm font-regular text-gray-900 flex\">\r\n                            <p className=\"mr-3 flex flex-row items-center\">\r\n                                <p className=\"ml-1\">{qna.nickname}</p>\r\n                            </p>\r\n                            <p className=\"mr-3 flex flex-row items-center\">\r\n                                <p className=\"ml-1\">2024-06-02</p>\r\n                            </p>\r\n                            <p className=\"ml-auto mr-2 flex flex-row\">\r\n                                <img src={email && isLiked ? fullheart : emptyheart} onClick={handleLikeClick} alt=\"...\" className=\"w-5 mr-3 inline\" /><span className=\"mx-1\">{qna.commHit}</span>\r\n                            </p>\r\n                        </div>\r\n                        <hr></hr>\r\n\r\n                        {qna.uploadFileNames.map((imgFile, i) =>\r\n                            <img\r\n                                alt=\"qna\"\r\n                                key={i}\r\n                                width={600}\r\n                                src={`${host}/api/community/qna/display/${imgFile}`}\r\n                                className=\"my-3\" />\r\n                        )}\r\n\r\n                        <p className=\"text-base leading-8 my-5\">\r\n                            {qna.content.split('\\n').map((line) => {\r\n                                return (\r\n                                    <span>{line}<br /></span>\r\n                                );\r\n                            })}\r\n                        </p>\r\n                        <hr></hr>\r\n                        <div className=\"flex justify-center space-x-2 mt-4\">\r\n                            {id === qna.id ?\r\n                                (\r\n                                    <>\r\n                                        <button type=\"button\" className=\"bg-gray-400 text-white rounded-md text-sm px-1 py-0.5 hover:bg-gray-500 ml-1\" onClick={() => moveToModify(commNo)}>수정하기</button>\r\n                                        <button type=\"button\" className=\"bg-gray-400 text-white rounded-md text-sm px-1 py-0.5 hover:bg-gray-500 ml-1\" onClick={handleClickDelete}>삭제하기</button>\r\n                                    </>\r\n                                )\r\n                                :\r\n                                (<></>)\r\n                            }\r\n                            <button type=\"button\" className=\"bg-gray-400 text-white rounded-md text-sm px-1 py-0.5 hover:bg-gray-500 ml-1\" onClick={() => moveToList()}>목록으로 이동</button>\r\n                        </div>\r\n                        <div>\r\n                            <div className=\"my-6 flex items-center space-x-2\">\r\n                                <input\r\n                                    type=\"text\"\r\n                                    placeholder=\"댓글을 입력해주세요\"\r\n                                    value={input}\r\n                                    className=\"flex-1 py-2 px-2 text-base bg-white rounded-lg border border-gray-200\"\r\n                                    onChange={e => setInput(e.target.value)}\r\n                                    onKeyDown={e => (e.key === 'Enter' ? handleClickAddReply() : null)}\r\n                                />\r\n                                <button\r\n                                    type=\"button\"\r\n                                    className=\"py-2.5 px-4 text-xs font-medium text-center text-white bg-subColor opacity-90 rounded-lg hover:bg-amber-900\"\r\n                                    onClick={handleClickAddReply}\r\n                                >\r\n                                    댓글 등록\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n                        {replies.length > 0 ? (\r\n                            replies.map(reply =>\r\n                                <ReplyComponent\r\n                                    replyNo={reply.replyNo}\r\n                                    id={reply.id}\r\n                                    content={reply.content}\r\n                                    regDate={reply.regDate}\r\n                                    isWriter={qna.id === reply.id ? true : false}\r\n                                    isEdit={id === reply.id ? true : false}\r\n                                    callbackFn={setModalMessage}\r\n                                />\r\n                            )\r\n                        )\r\n                            :\r\n                            (\r\n                                <div className=\"flex justify-center text-base\">\r\n                                    등록된 댓글이 없습니다\r\n                                </div>\r\n                            )}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            {addResultModal && (<ResultModal title={'알림'} content={`${addResultModal}`} callbackFn={() => setAddResultModal(null)} />)}\r\n            {/* 좋아요 기능 알림 모달 */}\r\n            {info && <InfoModal title={'알림'} content={`${info}`} callbackFn={closeInfoModal} />}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ReadComponent;","import { useParams } from \"react-router-dom\";\r\nimport ReadComponent from \"../../../components/community/qna/ReadComponent\";\r\n\r\nconst ReadPage = () => {\r\n  const {commNo} = useParams();\r\n  return (\r\n    <div className=\"text-xl flex-grow\">\r\n      <div className=\"m-auto bg-white w-5/6 rounded-md py-16\">\r\n        <div className=\"flex flex-col\">\r\n          <div className=\"overflow-x-auto sm:-mx-6 lg:-mx-8\">\r\n            <div className=\"inline-block min-w-full py-2 sm:px-6 lg:px-8\">\r\n              <div className=\"overflow-hidden\">\r\n                <div className=\"text-xl font-semibold pl-2 my-2 border-l-4 border-teal-300\">질문게시판</div>\r\n                <ReadComponent commNo={commNo}/>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ReadPage;"],"names":["getNum","param","defaultValue","parseInt","useCustomQna","navigate","useNavigate","queryParams","useSearchParams","page","get","size","queryDefault","createSearchParams","toString","moveToList","pageParam","queryStr","pageNum","sizeNum","pathname","search","moveToModify","num","console","log","concat","moveToRead","moveToAdd","initState","commNo","title","content","commHit","commCategory","uploadFileNames","initState2","likeNo","id","host","API_SERVER_HOST","_ref","result","setResult","useState","addResultModal","setAddResultModal","qna","setQna","input","setInput","replies","setReplies","loginInfo","useSelector","state","loginSlice","email","isLiked","setIsLiked","like","setLike","info","setInfo","useEffect","getOneQna","then","data","getList","likeInfoComm","setModalMessage","message","handleClickAddReply","newComment","addReply","_jsxs","className","children","_jsx","ResultModal","callbackFn","closeModal","nickname","src","fullheart","emptyheart","onClick","handleLikeClick","unlikeComm","decreaseLike","likeComm","increaseLike","alt","map","imgFile","i","width","split","line","_Fragment","type","e","deleteOne","placeholder","value","onChange","target","onKeyDown","key","length","reply","ReplyComponent","replyNo","regDate","isWriter","isEdit","InfoModal","closeInfoModal","ReadPage","useParams","ReadComponent"],"sourceRoot":""}