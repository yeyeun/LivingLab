{"version":3,"file":"static/js/3505.9c739a23.chunk.js","mappings":"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","sources":["api/chatApi.js","api/teamApi.js","components/common/mapSearch/MapComponent.js","components/common/mapSearch/LandingComponent.js","hooks/useCustomLogin.js","components/team/PartComponent.js","components/team/ReadComponent.js","pages/team/ReadPage.js"],"sourcesContent":["import axios from 'axios';\r\nexport const API_SERVER_HOST = 'http://223.130.157.92:22222';\r\n\r\nconst host = `${API_SERVER_HOST}/chat`;\r\n\r\n// 작성자가 게시글 작성 시 자동으로 채팅방 생성, 입장\r\nexport const postCreateRoom = async (userId, title, type, createRequest) => {\r\n  const res = await axios.post(`${host}/room/create`, createRequest, {\r\n    params: { userId, title, type }\r\n  });\r\n  return res.data;\r\n};\r\n\r\n// 특정 채팅방 삭제\r\nexport const deleteChatRoom = async (roomId) => {\r\n  const res = await axios.delete(`${host}/room/delete/${roomId}`);\r\n  return res.data;\r\n};\r\n\r\n// 채팅 기록 조회\r\nexport const getChatHistory = async (roomId) => {\r\n  const res = await axios.get(`${host}/room/history/${roomId}`);\r\n  return res.data;\r\n};\r\n\r\n// 유저의 모든 채팅방 목록 반환\r\nexport const getChatRoom = async (userId) => {\r\n  const res = await axios.get(`${host}/rooms`, { params: { userId } });\r\n  return res.data;\r\n};\r\n\r\n// 공동구매 채팅방의 유저 조회(참여하기 표시)\r\nexport const chatUserInfoBuy = async (buyNo) => {\r\n  const res = await axios.get(`${host}/room/buy/get`, {\r\n    params: { buyNo }\r\n  });\r\n  return res.data;\r\n};\r\n\r\n// 공동구매 채팅방 입장(참여)\r\nexport const enterChatRoomBuy = async (formData) => {\r\n  const response = await axios.post(`${host}/room/buy/enter`, formData);\r\n      return response.data;\r\n};\r\n\r\n// 공동구매 채팅방 퇴장(참여x)\r\nexport const exitChatRoomBuy = async (formData) => {\r\n  const response = await axios.post(`${host}/room/buy/exit`, formData);\r\n      return response.data;\r\n};\r\n\r\n// 동네모임 채팅방의 유저 조회(참여하기 표시)\r\nexport const chatUserInfoTeam = async (teamNo) => {\r\n  const res = await axios.get(`${host}/room/team/get`, {\r\n    params: { teamNo }\r\n  });\r\n  return res.data;\r\n};\r\n\r\n// 동네모임 채팅방 입장(참여)\r\nexport const enterChatRoomTeam = async (formData) => {\r\n  const response = await axios.post(`${host}/room/team/enter`, formData);\r\n      return response.data;\r\n};\r\n\r\n// 동네모임 채팅방 퇴장(참여x)\r\nexport const exitChatRoomTeam = async (formData) => {\r\n  const response = await axios.post(`${host}/room/team/exit`, formData);\r\n      return response.data;\r\n};\r\n\r\n\r\n\r\n\r\n\r\n","import axios from 'axios';\r\nexport const API_SERVER_HOST = 'http://223.130.157.92:22222';\r\nconst prefix = `${API_SERVER_HOST}/api/team`;\r\n\r\nexport const getOne = async (teamNo) => {\r\n  const res = await axios.get(`${prefix}/read/${teamNo}`);\r\n  return res.data;\r\n};\r\n\r\nexport const getList = async (pageParam, search, sort, category, latitude, longitude) => {\r\n  const { page, size } = pageParam;\r\n  const res = await axios.get(`${prefix}/list`, {params: { page: page, size: size, search: search, sort: sort, category: category, latitude: latitude, longitude: longitude}});\r\n  return res.data;\r\n};\r\n\r\nexport const postAddTeam = async(team) => {\r\n  const header = {headers:{\"Content-Type\":\"multipart/form-data\"}};\r\n  const res = await axios.post(`${prefix}/add`, team, header);\r\n  return res.data;\r\n}\r\n\r\nexport const modify = async(teamNo, team) => {\r\n  const header = {headers:{\"Content-Type\":\"multipart/form-data\"}};\r\n  const res = await axios.put(`${prefix}/modify/${teamNo}`, team, header);\r\n  return res.data;\r\n}\r\n\r\nexport const deleteOne = async(teamNo) => {\r\n  const res = await axios.delete(`${prefix}/delete/${teamNo}`);\r\n  return res.data;\r\n}\r\n\r\nexport const increaseLike = async(teamNo) => {\r\n  const res = await axios.put(`${prefix}/increase/${teamNo}`);\r\n  return res.data;\r\n}\r\n\r\nexport const decreaseLike = async(teamNo) => {\r\n  const res = await axios.put(`${prefix}/decrease/${teamNo}`);\r\n  return res.data;\r\n}\r\n\r\nexport const getLatestTeam = async (pageParam) => {\r\n  const { page, size } = pageParam;\r\n  const res = await axios.get(`${prefix}/latest`, { params: { page: page, size: size } });\r\n  return res.data;\r\n}\r\n\r\n/* 마이페이지 내가 작성한 글 조회 */\r\nexport const myList = async (id) => {\r\n  const res = await axios.get(`${prefix}/mylist/${id}`);\r\n  return res.data;\r\n};\r\n\r\nexport const myListAll = async (pageParam, id) => {\r\n  const { page, size } = pageParam;\r\n  const res = await axios.get(`${prefix}/mylistall`, { params: { page: page, size: size, id: id} });\r\n  return res.data;\r\n};","import React, { useState, useEffect } from 'react';\r\nimport { Map, MapMarker } from 'react-kakao-maps-sdk';\r\n\r\nconst { kakao } = window;\r\n\r\nconst MapComponent = ({ searchPlace }) => {\r\n  // 검색결과 배열에 담아줌\r\n  const [Places, setPlaces] = useState([]);\r\n\r\n  const [address, setAddress] = useState(''); // 현재 좌표의 주소를 저장할 상태\r\n  const [location, setLocation] = useState(''); // 현재 위치를 저장할 상태\r\n\r\n  const successHandler = (response) => {\r\n    //console.log(response); // coords: GeolocationCoordinates {latitude: 위도, longitude: 경도, …} timestamp: 1673446873903\r\n    const { latitude, longitude } = response.coords;\r\n    setLocation({ latitude, longitude });\r\n  };\r\n\r\n  const errorHandler = (error) => {\r\n    console.log(error);\r\n  };\r\n\r\n  useEffect(() => {\r\n    navigator.geolocation.getCurrentPosition(successHandler, errorHandler); // 성공시 successHandler, 실패시 errorHandler 함수가 실행된다.\r\n  });\r\n\r\n  useEffect(() => {\r\n    var infowindow = new kakao.maps.InfoWindow({ zIndex: 1 });\r\n    const container = document.getElementById('myMap');\r\n\r\n    const options = {\r\n      center: new kakao.maps.LatLng(location.latitude, location.longitude), // 현재 나의 실시간 좌표\r\n      //center: new kakao.maps.LatLng(35.8121472, 128.6176768),\r\n      level: 3,\r\n    };\r\n    const map = new kakao.maps.Map(container, options); // 지도 생성\r\n\r\n    const ps = new kakao.maps.services.Places();\r\n\r\n    ps.keywordSearch(searchPlace, placesSearchCB);\r\n\r\n    function placesSearchCB(data, status, pagination) {\r\n      if (status === kakao.maps.services.Status.OK) {\r\n        let bounds = new kakao.maps.LatLngBounds();\r\n\r\n        for (let i = 0; i < data.length; i++) {\r\n          displayMarker(data[i]);\r\n          bounds.extend(new kakao.maps.LatLng(data[i].y, data[i].x));\r\n        }\r\n\r\n        map.setBounds(bounds);\r\n\r\n        // 페이지 목록 보여주는 displayPagination() 추가\r\n        displayPagination(pagination);\r\n        setPlaces(data);\r\n      }\r\n    }\r\n\r\n    // 검색결과 목록 하단에 페이지 번호 표시\r\n    function displayPagination(pagination) {\r\n      var paginationEl = document.getElementById('pagination'),\r\n        fragment = document.createDocumentFragment(),\r\n        i;\r\n\r\n      // 기존에 추가된 페이지 번호 삭제\r\n      while (paginationEl.hasChildNodes()) {\r\n        paginationEl.removeChild(paginationEl.lastChild);\r\n      }\r\n\r\n      for (i = 1; i <= pagination.last; i++) {\r\n        var el = document.createElement('a');\r\n        el.href = '#';\r\n        el.innerHTML = i;\r\n\r\n        if (i === pagination.current) {\r\n          el.className = 'on';\r\n        } else {\r\n          el.onclick = (function (i) {\r\n            return function () {\r\n              pagination.gotoPage(i);\r\n            };\r\n          })(i);\r\n        }\r\n\r\n        fragment.appendChild(el);\r\n      }\r\n      paginationEl.appendChild(fragment);\r\n    }\r\n\r\n    function displayMarker(place) {\r\n      let marker = new kakao.maps.Marker({\r\n        map: map,\r\n        position: new kakao.maps.LatLng(place.y, place.x),\r\n      });\r\n\r\n      // 마커에 클릭이벤트를 등록합니다\r\n      kakao.maps.event.addListener(marker, 'click', function () {\r\n        // 마커를 클릭하면 장소명이 인포윈도우에 표출됩니다\r\n        infowindow.setContent('<div style=\"padding:5px;font-size:12px;\">' + place.place_name + '</div>');\r\n        infowindow.open(map, marker);\r\n      });\r\n    }\r\n  }, [searchPlace, location.latitude, location.longitude]);\r\n\r\n  return (\r\n    <div className=\"flex flex-col\">\r\n      <div\r\n        id=\"myMap\"\r\n        style={{\r\n          width: '100%',\r\n          height: '400px',\r\n          // position: 'absolute',\r\n        }}\r\n      ></div>\r\n\r\n      {/* 검색 결과는 최대 45개까지만 제공 */}\r\n      <div id=\"result-list\">\r\n        {Places.map((item, i) => (\r\n          <div id=\"result-one\" key={i} style={{ marginTop: '20px' }}>\r\n            <span>{i + 1}.&nbsp;</span>\r\n            <div>\r\n              <div className=\"text-xl\">{item.place_name}</div>\r\n              {item.road_address_name ? (\r\n                <div className=\"text-sm\">\r\n                  <span>{item.road_address_name}</span>\r\n                  <br />\r\n                  <span>({item.address_name})</span>\r\n                </div>\r\n              ) : (\r\n                <span>{item.address_name}</span>\r\n              )}\r\n              <div className=\"text-sm\">\r\n                <span>{item.phone}</span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        ))}\r\n        <div id=\"pagination\"></div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MapComponent;\r\n","import React, { useState } from 'react';\r\nimport MapComponent from './MapComponent';\r\n\r\n// 키워드로 장소검색하기\r\nfunction LandingComponent() {\r\n  const [InputText, setInputText] = useState('');\r\n  const [Place, setPlace] = useState('');\r\n\r\n  const onChange = (e) => {\r\n    setInputText(e.target.value);\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    setPlace(InputText);\r\n    setInputText(InputText);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <form className=\"flex items-center max-w-sm mb-2 mx-auto\" onSubmit={handleSubmit}>\r\n        <div className=\"relative w-full\">\r\n          <div className=\"absolute inset-y-0 start-0 flex items-center ps-3 pointer-events-none\">\r\n            <svg className=\"w-4 h-4 text-gray-500 dark:text-gray-400\" aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 18 20\">\r\n              <path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"m19 19-4-4m0-7A7 7 0 1 1 1 8a7 7 0 0 1 14 0Z\" />\r\n            </svg>\r\n          </div>\r\n          <input\r\n            type=\"text\"\r\n            id=\"simple-search\"\r\n            className=\"bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:border-teal-300 block w-full ps-10 p-2\"\r\n            placeholder=\"검색할 키워드를 입력하세요\"\r\n            onChange={onChange}\r\n            value={InputText}\r\n          />\r\n        </div>\r\n        <button type=\"submit\" className=\"text-white bg-teal-300 hover:bg-teal-400 font-medium rounded-lg text-sm px-4 py-2 w-20 ml-1\">\r\n          검색\r\n        </button>\r\n      </form>\r\n\r\n      <MapComponent searchPlace={Place} />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default LandingComponent;\r\n","// 로그인 관련 커스텀 훅\r\nimport { Navigate, useNavigate, createSearchParams } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { loginPostAsync, logout } from '../slices/loginSlice';\r\n\r\nconst useCustomLogin = () => {\r\n  const navigate = useNavigate();\r\n  const dispatch = useDispatch();\r\n\r\n  const loginState = useSelector((state) => state.loginSlice); // 로그인 상태\r\n\r\n  const isLogin = loginState.email ? true : false; // 로그인 여부\r\n\r\n  // 로그인 함수\r\n  const doLogin = async (loginParam) => {\r\n    const action = await dispatch(loginPostAsync(loginParam));\r\n    return action.payload;\r\n  };\r\n\r\n  // 로그아웃 함수\r\n  const doLogout = () => {\r\n    dispatch(logout());\r\n  };\r\n\r\n  // 페이지 이동\r\n  const moveToPath = (path) => {\r\n    navigate({ pathname: path }, { replace: true });\r\n  };\r\n\r\n  //로그인 페이지로 이동\r\n  const moveToLogin = () => {\r\n    navigate({ pathname: '/user/login' }, { replace: true });\r\n  };\r\n\r\n  const moveToJoin = () => {\r\n    navigate({ pathname: '/user/join' }, { replace: true });\r\n  }\r\n\r\n  //로그인 페이지로 이동 컴포넌트\r\n  const moveToLoginReturn = () => {\r\n    return <Navigate replace to=\"/user/login\" />;\r\n  };\r\n\r\n  // 토큰에 따른 예외 처리\r\n  const exceptionHandle = (ex) => {\r\n    console.log('Exception-----------------');\r\n    console.log(ex);\r\n\r\n    const errorMsg = ex.response.data.error;\r\n    const errorStr = createSearchParams({ error: errorMsg }).toString();\r\n\r\n    if (errorMsg === 'REQUIRE_LOGIN') {\r\n      alert('로그인 해야만 합니다.');\r\n      navigate({ pathname: '/user/login', search: errorStr }); // 로그인 페이지로 이동\r\n      return;\r\n    }\r\n\r\n    if (ex.response.data.error === 'ERROR_ACCESSDENIED') {\r\n      alert('해당메뉴를 사용할 수 있는 권한이 없습니다.');\r\n      navigate({ pathname: '/', search: errorStr }); // 홈으로 이동\r\n      return;\r\n    }\r\n  };\r\n\r\n  return {\r\n    loginState,\r\n    isLogin,\r\n    doLogin,\r\n    doLogout,\r\n    moveToPath,\r\n    moveToLogin,\r\n    moveToLoginReturn,\r\n    exceptionHandle,\r\n    moveToJoin\r\n  };\r\n};\r\n\r\nexport default useCustomLogin;\r\n","import { useEffect, useState } from 'react';\r\nimport ProfileComponent from '../common/ProfileComponent';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport useCustomLogin from './../../hooks/useCustomLogin';\r\nimport ModalComponent from '../common/ModalComponent';\r\nimport ResultModal from '../common/ResultModal';\r\nimport InfoModal from '../common/InfoModal';\r\nimport { chatUserInfoTeam, exitChatRoomTeam } from '../../api/chatApi';\r\nimport { getUser } from '../../api/userApi'\r\n\r\nconst PartComponent = ({ teamNo }) => {\r\n\r\n  const [showModal, setShowModal] = useState(false);\r\n  const [showConfirm, setShowConfirm] = useState(false);\r\n  const [modalMessage, setModalMessage] = useState('');\r\n  const [chatroomInfo, setChatroomInfo] = useState(null);\r\n  const [displayUsers, setDisplayUsers] = useState([]);\r\n  const [result, setResult] = useState(null);\r\n  const loginInfo = useSelector((state) => state.loginSlice);\r\n  const userId = loginInfo?.id;\r\n\r\n\r\n  useEffect(() => {\r\n    const fetchChatroomData = async () => {\r\n      try {\r\n        const chatroomResponse = await chatUserInfoTeam(teamNo);\r\n        const chatroomData = chatroomResponse.data;\r\n        setChatroomInfo(chatroomData);\r\n\r\n        // 작성자 정보 가져오기\r\n        const writerResponse = await getUser(chatroomData.writerId);\r\n\r\n        // 참여자 정보 가져오기\r\n        const readerDataPromises = chatroomData.readerId.map((readerId) => getUser(readerId));\r\n        const readerResponses = await Promise.all(readerDataPromises);\r\n\r\n        // 화면에 표시할 유저들 정보 설정\r\n        const participants = [writerResponse, ...readerResponses];\r\n        setDisplayUsers(participants);\r\n\r\n      } catch (error) {\r\n        console.error('데이터 가져오기 실패', error);\r\n      }\r\n    };\r\n    fetchChatroomData();\r\n  }, [teamNo]);\r\n\r\n  const handleOpenModal = () => {\r\n    setShowModal(true);\r\n  };\r\n\r\n  const handleCloseModal = () => {\r\n    setShowModal(false);\r\n  };\r\n\r\n  const handleDeleteClick = () => {\r\n    setModalMessage('삭제하시겠습니까?');\r\n    setShowConfirm(true);\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    setShowConfirm(false);\r\n  };\r\n\r\n  const handleResultModalClose = () => {\r\n    setResult(null);\r\n    window.location.reload();\r\n  };\r\n\r\n  const handleExitChatRoom = async () => {\r\n    try {\r\n      const formData = new FormData();\r\n      formData.append('userId', userId);\r\n      formData.append('teamNo', teamNo);\r\n\r\n      const isUserInRoom = displayUsers.some(user => user.id === userId);\r\n      if(!isUserInRoom){\r\n        setResult('참여중이 아닙니다.');\r\n      } else if(chatroomInfo.writerId == userId){\r\n        setResult('자신이 쓴 게시글은 참여를 취소할 수 없습니다.');\r\n      } else {\r\n        await exitChatRoomTeam(formData);\r\n        setDisplayUsers((prevUsers) => prevUsers.filter((user) => user.id !== userId));\r\n        setResult('참여를 취소했습니다.');\r\n        setShowModal(false);\r\n      }\r\n    } catch (error) {\r\n      setResult('참여 취소 실패:', error);\r\n      setShowModal(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"flex justify-center bg-slate-100 w-1/5 p-4 ml-10 mr-20 rounded-lg h-30\">\r\n      <div className=\"w-full\">\r\n        <div className=\"bg-blue-200 rounded-lg text-center p-4\">\r\n          <h2>참여 인원</h2>\r\n        </div>\r\n        <hr />\r\n        <div className>\r\n          <div>\r\n            {displayUsers.map((user) => (\r\n              <div className=\"flex p-5\" key={user.id}>\r\n                <img alt=\"Profile_Img\" src={`http://223.130.157.92:22222/api/user/userProfileImage?email=${user.email}`} className=\"rounded-full size-10 mr-2\" />\r\n                {user.nickname}\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"flex mt-5\">\r\n          <button className=\"text-base text-white bg-blue-400 p-2 rounded-md w-1/2 mr-2 hover:bg-blue-500\" onClick={() => setShowModal(true)}>\r\n            채팅\r\n          </button>\r\n          <button className=\"text-base text-white bg-slate-400 p-2 rounded-md w-1/2 hover:bg-slate-500\" onClick={handleExitChatRoom}>참여 X</button>\r\n        </div>\r\n      </div>\r\n      {result && <ResultModal title={'알림'} content={result} callbackFn={handleResultModalClose} />}\r\n      <ModalComponent show={showModal} onClose={handleCloseModal} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PartComponent;\r\n","import { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport { API_SERVER_HOST, deleteOne, getOne, increaseLike, decreaseLike } from '../../api/teamApi';\r\nimport { likeTeam, unlikeTeam, likeInfoTeam,deleteLikeTeam } from '../../api/likeApi';\r\nimport { getUser } from '../../api/userApi';\r\nimport { enterChatRoomTeam } from '../../api/chatApi';\r\nimport { useSelector } from 'react-redux';\r\nimport Slider from 'react-slick';\r\nimport useCustomMove from '../../hooks/useCustomMove';\r\nimport ModalComponent from '../common/ModalComponent';\r\nimport MapComponent from '../common/MapComponent';\r\nimport iconNext from '../../resources/images/icon-next.png';\r\nimport userIcon from '../../resources/images/user.png';\r\nimport mapIcon from '../../resources/images/map.png';\r\nimport emptyheart from '../../resources/images/heart_empty.png';\r\nimport fullheart from '../../resources/images/heart_full.png';\r\nimport ResultModal from '../common/ResultModal';\r\nimport PartComponent from './PartComponent'\r\nimport Profile_Img from '../../resources/images/profile_img.png';\r\nimport LandingComponent from './../common/mapSearch/LandingComponent';\r\nimport InfoModal from '../common/InfoModal';\r\n\r\nconst initState = {\r\n  teamNo: 0,\r\n  id: 0,\r\n  title: '',\r\n  location: '',\r\n  content: '',\r\n  teamCategory: '',\r\n  max: 0,\r\n  current: 0,\r\n  deadline: '',\r\n  flag: '',\r\n  teamHit: 0,\r\n  uploadFileNames: [],\r\n};\r\n\r\nconst initUser = {\r\n  nickname: '',\r\n  profileImage: '',\r\n};\r\n\r\nconst initState2 = {\r\n  likeNo: 0,\r\n  id: 0,\r\n  teamNo: 0,\r\n};\r\n\r\nconst host = API_SERVER_HOST;\r\n\r\nconst ReadComponent = ({ teamNo }) => {\r\n  const [team, setTeam] = useState(initState);\r\n  const [user, setUser] = useState(initUser);\r\n  const [result, setResult] = useState(null);\r\n  const [addResultModal, setAddResultModal] = useState(null);\r\n  const { moveToList, moveToModify } = useCustomMove();\r\n  const loginInfo = useSelector((state) => state.loginSlice);\r\n  const email = loginInfo?.email;\r\n  const ino = loginInfo.id;\r\n  const [isLiked, setIsLiked] = useState({}); // true/false에 따라 하트 이미지 변경\r\n  const [like, setLike] = useState(initState2);\r\n  const [info, setInfo] = useState(null);\r\n  const [userId, setUserId] = useState('');\r\n  const [ current, setCurrent ] = useState(0);\r\n  const [ max, setMax ] = useState(0);\r\n\r\n  // 이미지 슬라이더\r\n  const settings = {\r\n    dots: true,\r\n    fade: true,\r\n    infinite: true,\r\n    autoplay: true,\r\n    speed: 500,\r\n    slidesToShow: 1,\r\n    slidesToScroll: 1,\r\n    waitForAnimate: false,\r\n  };\r\n\r\n  useEffect(() => {\r\n    getOne(teamNo).then((data) => {\r\n      setTeam(data);\r\n      setCurrent(data.current);\r\n      setMax(data.max);\r\n    });\r\n  }, [teamNo, info]);\r\n\r\n  useEffect(() => {\r\n    getUser(ino).then((data) => {\r\n      fetchUserProfileImage(data.email);\r\n      setUser(data);\r\n    });\r\n  }, [ino]);\r\n\r\n  useEffect(() => {\r\n    if (email) {\r\n      //로그인시에만 실행\r\n      likeInfoTeam(teamNo, ino).then((data) => {\r\n        setLike(data);\r\n        if (data) {\r\n          //data가 있으면 이미 좋아요 누른글\r\n          setIsLiked(true);\r\n        } else {\r\n          setIsLiked(false);\r\n        }\r\n      });\r\n    }\r\n  }, [email, info]);\r\n\r\n  const [showModal, setShowModal] = useState(false);\r\n\r\n  const handleClickAdd = async () => {\r\n    const formData = new FormData();\r\n    formData.append('userId', ino); // ino 값을 formData에 추가\r\n    formData.append('teamNo', teamNo); // buyNo 값을 formData에 추가\r\n    if(current === max){\r\n      setResult('더이상 참여할수 없습니다.');\r\n    } else{\r\n      try {\r\n        await enterChatRoomTeam(formData); // FormData를 인자로 전달하여 호출\r\n        setResult('참여가 완료되었습니다.');\r\n      } catch (error) {\r\n        setResult('이미 참여 중입니다.', error);\r\n      }\r\n    }\r\n  };\r\n\r\n  const closeModal = () => {\r\n    setResult(null);\r\n    window.location.reload();\r\n  };\r\n\r\n  const handleCloseModal = () => {\r\n    setShowModal(false);\r\n  };\r\n\r\n  const handleClickDelete = () => {\r\n    deleteLikeTeam(teamNo)\r\n    .then(() => {\r\n      return deleteOne(teamNo);\r\n    })\r\n    .then((result) => {\r\n      console.log('delete result : ' + result);\r\n      setResult('삭제되었습니다');\r\n      moveToList()\r\n    });\r\n  };\r\n\r\n\r\n  const closeInfoModal = () => {\r\n    setInfo(null);\r\n  };\r\n\r\n  const handleLikeClick = () => {\r\n    if (!email) {\r\n      setInfo('로그인 후 이용 가능합니다');\r\n      return;\r\n    }\r\n    if (isLiked) {\r\n      unlikeTeam(like.likeNo);\r\n      decreaseLike(teamNo);\r\n      setInfo('좋아요 목록에서 삭제되었습니다');\r\n    } else {\r\n      const data = {\r\n        id: ino,\r\n        teamNo: teamNo,\r\n      };\r\n      likeTeam(data);\r\n      increaseLike(teamNo);\r\n      setInfo('좋아요 목록에 추가되었습니다');\r\n    }\r\n    setIsLiked(!isLiked);\r\n  };  \r\n\r\n  //날짜 포맷 설정\r\n  const formatDeadline = (deadline) => {\r\n    const now = new Date();\r\n    const deadlineDate = new Date(deadline);\r\n\r\n    const padZero = (num) => num.toString().padStart(2, '0'); //숫자를 2자리 문자열로 반환\r\n    const isToday = (date) => {\r\n      return date.getFullYear() === now.getFullYear() && date.getMonth() === now.getMonth() && date.getDate() === now.getDate();\r\n    };\r\n\r\n    const hours = deadlineDate.getHours();\r\n    const minutes = padZero(deadlineDate.getMinutes());\r\n    const amPm = hours < 12 ? '오전' : '오후';\r\n    const displayHours = padZero(hours % 12 || 12); // 24시간 포맷을 12시간 포맷으로 변경\r\n\r\n    if (isToday(deadlineDate)) {\r\n      return `오늘 ${amPm} ${displayHours}:${minutes}까지`;\r\n    } else {\r\n      const year = deadlineDate.getFullYear();\r\n      const month = padZero(deadlineDate.getMonth() + 1);\r\n      const day = padZero(deadlineDate.getDate());\r\n      return `${year}-${month}-${day} ${amPm} ${displayHours}:${minutes}까지`;\r\n    }\r\n  };\r\n\r\n  //프로필 사진 읽어오는 함수\r\n  const fetchUserProfileImage = async (email) => {\r\n    try {\r\n      const res = await axios.get(`http://223.130.157.92:22222/api/user/userProfileImage?email=${email}`, {\r\n        responseType: 'arraybuffer', // 바이너리 데이터로 응답받기\r\n      });\r\n\r\n      // 받은 바이너리 데이터 처리\r\n      const blob = new Blob([res.data], { type: 'image/png' });\r\n      const imageUrl = URL.createObjectURL(blob);\r\n      setUser((prev) => ({\r\n        ...prev, // 이전 상태를 복사해야 이미지 삭제하고 다시 변경했을 대 바로 적용됨\r\n        profileImage: imageUrl, // 이미지 데이터 추가\r\n      }));\r\n      console.log('프로필 사진 읽기 최종 성공');\r\n    } catch (error) {\r\n      console.error('프로필 이미지가 없습니다', error);\r\n      // 오류가 발생하면 대체 이미지를 사용하도록 설정\r\n      setUser((prev) => ({\r\n        ...prev,\r\n        profileImage: Profile_Img,\r\n      }));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\" bg-slate-200 w-1/4 rounded-md px-4 py-4\">\r\n        <LandingComponent />\r\n      </div>\r\n      <div className=\"bg-slate-100 w-[1000px] ml-5 p-4 rounded-lg\">\r\n        <div className=\"flex justify-between items-center\">\r\n          <span className=\"text-left font-semibold ml-2 items-center flex\">\r\n            {team.flag ? '모집 마감' : '모집 중'}\r\n            <img src={iconNext} alt=\"...\" className=\"w-7 inline\" />\r\n          </span>\r\n          <span className=\"text-right text-base\">{formatDeadline(team.deadline)}</span>\r\n        </div>\r\n        <div className=\"grid grid-cols-10 w-full mx-auto mt-4 mb-1 text-xl bg-white\">\r\n          <div className=\"col-start-9 col-span-2 ml-5 mt-4 text-right flex justify-center\">\r\n          <img src={email && isLiked ? fullheart : emptyheart} onClick={handleLikeClick} alt=\"...\" className=\"w-7 mr-3 inline\" />\r\n            {team.teamHit}\r\n          </div>\r\n          <div className=\"col-start-3 col-span-6 h-72 mt-3 mb-10\">\r\n            {team.uploadFileNames.length > 0 ? (\r\n              <Slider {...settings}>\r\n                {team.uploadFileNames.map((imgFile, i) => (\r\n                  <img alt=\"team\" key={i} src={`${host}/api/team/display/${imgFile}`} className=\"object-contain w-full h-72\" />\r\n                ))}\r\n              </Slider>\r\n            ) : (\r\n              <img alt=\"team\" src={`${host}/api/team/display/default.png`} className=\"object-contain w-full h-72\" />\r\n            )}\r\n          </div>\r\n          <div className=\"col-start-2 col-span-3 text-base\">\r\n            <span className=\"text-base rounded-3xl text-slate-700 text-center py-1 px-3 mr-2 bg-blue-100 border-blue-300 border\">\r\n              {team.teamCategory === '1' && '운동'}\r\n              {team.teamCategory === '2' && '문화생활'}\r\n              {team.teamCategory === '3' && '반려동물'}\r\n              {team.teamCategory === '4' && '취미생활'}\r\n              {team.teamCategory === '5' && '기타'}\r\n            </span>\r\n            <span className=\"text-base rounded-3xl text-slate-700 text-center py-1 px-3 bg-neutral-100 border-neutral-300 border\">\r\n              <img src={userIcon} alt=\"...\" className=\"w-3 inline mb-1\" />\r\n              &ensp;{team.current} / {team.max}\r\n            </span>\r\n          </div>\r\n          <div className=\"col-start-2 col-span-6 text-slate-700 text-2xl my-5\">{team.title}</div>\r\n          <div className=\"col-start-2 col-span-6 text-base\">\r\n            <img src={mapIcon} alt=\"...\" className=\"w-5 inline\" />\r\n            &ensp;{team.location}\r\n          </div>\r\n          <div className=\"col-start-2 col-span-8\"></div>\r\n          <div className=\"col-start-8 col-span-2 text-right text-base\">{team.nickname}</div>\r\n          <div className=\"col-start-2 col-span-8 my-5 border-t-4 py-4 whitespace-pre-wrap\">{team.content}</div>\r\n          <div className=\"col-start-2 col-span-8 h-[450px]\">\r\n            <MapComponent location={team.location} />\r\n          </div>\r\n          {/* <div className=\"col-start-2 col-span-8 my-6\">\r\n            <div className=\"flex justify-between space-x-4\"> */}\r\n          {ino === team.id ? (\r\n            <>\r\n              <div className=\"col-start-2 col-span-8 my-6\">\r\n                <div className=\"flex justify-between space-x-4\">\r\n                  {/* <div className=\"flex\"> */}\r\n                  {/* <div className=\"flex mr-auto\"> */}\r\n                  <button className=\"text-base text-white bg-orange-400 p-2 rounded-md w-1/4 mr-2 hover:bg-red-500\" onClick={() => moveToModify(teamNo)}>\r\n                    수정하기\r\n                  </button>\r\n                  <button className=\"text-base text-white bg-red-400 p-2 rounded-md w-1/4 mr-2 hover:bg-slate-500\" onClick={handleClickDelete}>\r\n                    삭제하기\r\n                  </button>\r\n                  {/* </div> */}\r\n\r\n                  <button className=\"text-base text-white bg-blue-400 p-2 rounded-md w-1/4 mr-2 hover:bg-blue-500\">\r\n                    참여하기\r\n                  </button>\r\n                  <button className=\"text-base text-white bg-slate-400 p-2 rounded-md w-1/4 hover:bg-slate-500\" onClick={() => moveToList()}>\r\n                    목록\r\n                  </button>\r\n                  {/* </div> */}\r\n                </div>\r\n              </div>\r\n            </>\r\n          ) : (\r\n            <>\r\n              <div className=\"col-start-6 col-span-4 my-6\">\r\n                <div className=\"flex justify-between space-x-4\">\r\n                  <button className=\"text-base text-white bg-blue-400 p-2 rounded-md w-1/2 mr-2 hover:bg-blue-500\" onClick={handleClickAdd}>\r\n                    참여하기\r\n                  </button>\r\n                  <button className=\"text-base text-white bg-slate-400 p-2 rounded-md w-1/2 hover:bg-slate-500\" onClick={() => moveToList()}>\r\n                    목록\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </>\r\n          )}\r\n          {/* </div>\r\n          </div> */}\r\n          {result && <ResultModal title={'알림'} content={`${result}`} callbackFn={closeModal} />}\r\n          {addResultModal && <ResultModal title={'알림'} content={`${addResultModal}`} callbackFn={() => setAddResultModal(null)} />}\r\n          <ModalComponent show={showModal} onClose={handleCloseModal} />\r\n          {/* 좋아요 기능 알림 모달 */}\r\n          {info && <InfoModal title={'알림'} content={`${info}`} callbackFn={closeInfoModal} />}\r\n        </div>\r\n      </div>\r\n      {/* 참여인원 목록 컴포넌트 */}\r\n      <PartComponent teamNo={teamNo} /> \r\n    </>\r\n  );\r\n};\r\nexport default ReadComponent;\r\n","import { useParams } from 'react-router-dom';\r\nimport ReadComponent from '../../components/team/ReadComponent';\r\n\r\nconst ReadPage = () => {\r\n  const { teamNo } = useParams();\r\n  return (\r\n    <>\r\n      <div className=\"flex justify-center\">\r\n        <ReadComponent teamNo={teamNo} />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ReadPage;\r\n"],"names":["host","concat","postCreateRoom","async","userId","title","type","createRequest","axios","post","params","data","getChatHistory","get","roomId","getChatRoom","chatUserInfoBuy","buyNo","enterChatRoomBuy","formData","exitChatRoomBuy","chatUserInfoTeam","teamNo","enterChatRoomTeam","exitChatRoomTeam","API_SERVER_HOST","prefix","getOne","getList","pageParam","search","sort","category","latitude","longitude","page","size","postAddTeam","team","headers","modify","put","deleteOne","delete","increaseLike","decreaseLike","getLatestTeam","myList","id","myListAll","kakao","window","_ref","searchPlace","Places","setPlaces","useState","address","setAddress","location","setLocation","successHandler","response","coords","errorHandler","error","console","log","useEffect","navigator","geolocation","getCurrentPosition","infowindow","maps","InfoWindow","zIndex","container","document","getElementById","options","center","LatLng","level","map","Map","displayMarker","place","marker","Marker","position","y","x","event","addListener","setContent","place_name","open","services","keywordSearch","status","pagination","Status","OK","bounds","LatLngBounds","i","length","extend","setBounds","paginationEl","fragment","createDocumentFragment","hasChildNodes","removeChild","lastChild","last","el","createElement","href","innerHTML","current","className","onclick","gotoPage","appendChild","displayPagination","_jsxs","children","_jsx","style","width","height","item","marginTop","road_address_name","address_name","phone","InputText","setInputText","Place","setPlace","_Fragment","onSubmit","e","preventDefault","xmlns","fill","viewBox","stroke","d","placeholder","onChange","target","value","MapComponent","useCustomLogin","navigate","useNavigate","dispatch","useDispatch","loginState","useSelector","state","loginSlice","isLogin","email","doLogin","loginPostAsync","loginParam","payload","doLogout","logout","moveToPath","path","pathname","replace","moveToLogin","moveToLoginReturn","Navigate","to","exceptionHandle","ex","errorMsg","errorStr","createSearchParams","toString","alert","moveToJoin","showModal","setShowModal","showConfirm","setShowConfirm","modalMessage","setModalMessage","chatroomInfo","setChatroomInfo","displayUsers","setDisplayUsers","result","setResult","loginInfo","chatroomData","writerResponse","getUser","writerId","readerDataPromises","readerId","participants","Promise","all","fetchChatroomData","user","alt","src","nickname","onClick","FormData","append","some","prevUsers","filter","ResultModal","content","callbackFn","handleResultModalClose","reload","ModalComponent","show","onClose","handleCloseModal","initState","teamCategory","max","deadline","flag","teamHit","uploadFileNames","initUser","profileImage","initState2","likeNo","setTeam","setUser","addResultModal","setAddResultModal","moveToList","moveToModify","useCustomMove","ino","isLiked","setIsLiked","like","setLike","info","setInfo","setUserId","setCurrent","setMax","then","fetchUserProfileImage","likeInfoTeam","res","responseType","blob","Blob","imageUrl","URL","createObjectURL","prev","Profile_Img","LandingComponent","iconNext","now","Date","deadlineDate","padZero","num","padStart","hours","getHours","minutes","getMinutes","amPm","displayHours","date","getFullYear","getMonth","getDate","year","month","day","formatDeadline","fullheart","emptyheart","handleLikeClick","unlikeTeam","likeTeam","Slider","dots","fade","infinite","autoplay","speed","slidesToShow","slidesToScroll","waitForAnimate","imgFile","userIcon","mapIcon","handleClickDelete","deleteLikeTeam","closeModal","InfoModal","closeInfoModal","PartComponent","ReadPage","useParams","ReadComponent"],"sourceRoot":""}