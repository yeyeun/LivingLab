{"version":3,"file":"static/js/5285.65369c2e.chunk.js","mappings":"yJAkBA,MAAMA,EAAe,mCAEfC,EAAe,yCAgBRC,EAAoBA,IACjB,GAAAC,OAfO,0CAea,eAAAA,OAAcH,EAAY,kBAAAG,OAAiBF,EAAY,oCAU9EG,EAAiBC,UAC5B,MAMMC,EAAS,CACbC,WAAY,qBACZC,UAAWR,EACXC,aAAcA,EACdQ,KAAMC,GASR,aALkBC,EAAAA,EAAMC,KAtCD,sCAsCwBN,EAdhC,CACbO,QAAS,CACP,eAAgB,sDAeIC,KAAKC,YAEX,EAIPC,EAAyBX,gBAClBM,EAAAA,EAAMM,IAAI,GAADd,OAAIe,EAAAA,GAAe,gCAAAf,OAA+BgB,KAElEL,I,8FCrEb,MAwEA,EAxEuBM,KACrB,MAAMC,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,MAEXC,GAAaC,EAAAA,EAAAA,KAAaC,GAAUA,EAAMC,aAuDhD,MAAO,CACLH,aACAI,UAvDcJ,EAAWK,MAwDzBC,QArDc1B,gBACOkB,GAASS,EAAAA,EAAAA,IAAeC,KAC/BC,QAoDdC,SAhDeA,KACfZ,GAASa,EAAAA,EAAAA,MAAS,EAgDlBC,WA5CkBC,IAClBjB,EAAS,CAAEkB,SAAUD,GAAQ,CAAEE,SAAS,GAAO,EA4C/CC,YAxCkBA,KAClBpB,EAAS,CAAEkB,SAAU,eAAiB,CAAEC,SAAS,GAAO,EAwCxDE,kBAhCwBA,KACjBC,EAAAA,EAAAA,KAACC,EAAAA,GAAQ,CAACJ,SAAO,EAACK,GAAG,gBAgC5BC,gBA5BuBC,IACvBC,QAAQC,IAAI,8BACZD,QAAQC,IAAIF,GAEZ,MAAMG,EAAWH,EAAGI,SAASrC,KAAKsC,MAC5BC,GAAWC,EAAAA,EAAAA,IAAmB,CAAEF,MAAOF,IAAYK,WAEzD,MAAiB,kBAAbL,GACFM,MAAM,kEACNnC,EAAS,CAAEkB,SAAU,cAAekB,OAAQJ,KAIf,uBAA3BN,EAAGI,SAASrC,KAAKsC,OACnBI,MAAM,2HACNnC,EAAS,CAAEkB,SAAU,IAAKkB,OAAQJ,UAFpC,CAIA,EAYAK,WAvCiBA,KACjBrC,EAAS,CAAEkB,SAAU,cAAgB,CAAEC,SAAS,GAAO,EAuCxD,C,gICjEH,MAqCA,EArC2BmB,IACzB,MAAOC,IAAgBC,EAAAA,EAAAA,OAEjB,WAAExB,IAAejB,EAAAA,EAAAA,KAEjBV,EAAWkD,EAAa3C,IAAI,QAE5BM,GAAWC,EAAAA,EAAAA,MAsBjB,OAnBAsC,EAAAA,EAAAA,YAAU,MACR1D,EAAAA,EAAAA,IAAeM,GAAUqD,MAAM5C,KAC7BH,EAAAA,EAAAA,IAAuBG,GAAa4C,MAAMC,IACxChB,QAAQC,IAAI,gCACZD,QAAQC,IAAIe,GACZzC,GAAS0C,EAAAA,EAAAA,IAAMD,IAIb3B,EADE2B,EACS,IAEA,cACb,GACA,GACF,GACD,CAACtD,KAKFiC,EAAAA,EAAAA,KAAA,OAAAuB,UACEvB,EAAAA,EAAAA,KAAA,OAAAuB,SAAK,0BAED,C","sources":["api/kakaoApi.js","hooks/useCustomLogin.js","pages/user/KakaoRedirectPage.js"],"sourcesContent":["// <REST API를 사용한 카카오 로그인 과정>\r\n// [1. 인가 코드 받기]\r\n// 1) 서비스 서버가 카카오 인증 서버로 인가 코드 받기를 요청합니다.\r\n// 2) 카카오 인증 서버가 사용자에게 카카오계정 로그인을 통한 인증을 요청합니다.\r\n// - 클라이언트에 유효한 카카오계정 세션이 있거나, 카카오톡 인앱 브라우저에서의 요청인 경우 4단계로 넘어갑니다.\r\n// 3) 사용자가 카카오계정으로 로그인합니다.\r\n// 4) 카카오 인증 서버가 사용자에게 동의 화면을 출력하여 인가를 위한 사용자 동의를 요청합니다.\r\n// - 동의 화면은 서비스 애플리케이션(이하 앱)의 동의항목 설정에 따라 구성됩니다.\r\n// 5) 사용자가 필수 동의항목, 이 외 원하는 동의항목에 동의한 뒤 [동의하고 계속하기] 버튼을 누릅니다.\r\n// 6)카카오 인증 서버는 서비스 서버의 Redirect URI로 인가 코드를 전달합니다.\r\n\r\n// [2. 토큰 받기 (1에서 전달받은 인가 코드로 토큰 발급을 요청)]\r\n// 1) 서비스 서버가 Redirect URI로 전달받은 인가 코드로 토큰 받기를 요청합니다.\r\n// 2) 카카오 인증 서버가 토큰을 발급해 서비스 서버에 전달합니다.\r\n\r\nimport axios from 'axios';\r\nimport { API_SERVER_HOST } from './userApi';\r\n\r\nconst rest_api_key = 'ea0feb168fdd4ed8456013d8b2f26c49'; // 이메일 나오는 rest api 키 받음\r\n\r\nconst redirect_uri = 'http://223.130.157.92:22222/user/kakao'; //카카오 로그인에서 사용할 OAuth Redirect URI를 설정\r\n\r\nconst auth_code_path = 'https://kauth.kakao.com/oauth/authorize'; // 인가 코드 받는 경로\r\n\r\nconst access_token_url = 'https://kauth.kakao.com/oauth/token'; // 토큰 받는 경로\r\n\r\n// 1. 인가 코드 받기를 요청 (GET)\r\n// - 사용자가 서비스에서 카카오 로그인 버튼 클릭 시,\r\n// - 카카오 인증 서버로 인가코드(code) 발급 요청\r\n// redirect_uri에 GET 요청으로 전달\r\n// 카카오 인증 서버는 인가코드를 발급해 서비스 서버의 Redirect URI로 인가 코드를 전달\r\n///////////////////////////////////////////////////////////////////////////////////////\r\n// 기존 로그인 여부와 상관없이 로그인 하기(맨뒤에 prompt=login을 추가)\r\n// 이 기능을 사용하면 사용자가 브라우저에 카카오 계정으로 로그인되어 있는 상태라도\r\n// 다시 카카오 계정으로 로그인하는 과정을 거쳐 서비스에 카카오 로그인하도록 할 수 있다.\r\n// 인가 코드 받기 요청시 prompt 파리미터 값을 login으로 지정\r\nexport const getKakaoLoginLink = () => {\r\n  const kakaoURL = `${auth_code_path}?client_id=${rest_api_key}&redirect_uri=${redirect_uri}&response_type=code&prompt=login`;\r\n  //const kakaoURL = `${auth_code_path}?client_id=${rest_api_key}&redirect_uri=${redirect_uri}&response_type=code`;\r\n\r\n  return kakaoURL;\r\n};\r\n\r\n// 2. 인가 코드로 토큰 발급을 요청 (POST)\r\n// - 서비스는 전달받은 인가 코드로 토큰을 요청하여 Access Token과 Refresh 토큰을 발급받는다.\r\n// 인가 코드 받기만으로는 카카오 로그인이 완료되지 않는다.\r\n// 토큰 받기까지 마쳐야 카카오 로그인을 정상적으로 완료할 수 있다.\r\nexport const getAccessToken = async (authCode) => {\r\n  const header = {\r\n    headers: {\r\n      'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8',\r\n    },\r\n  };\r\n\r\n  const params = {\r\n    grant_type: 'authorization_code',\r\n    client_id: rest_api_key,\r\n    redirect_uri: redirect_uri,\r\n    code: authCode,\r\n  };\r\n\r\n  // 필수 파라미터(params)를 포함해 POST로 요청\r\n  const res = await axios.post(access_token_url, params, header);\r\n\r\n  // 요청 성공시, 응답은 토큰(accessToken)과 토큰 정보를 포함한다.\r\n  const accessToken = res.data.access_token;\r\n\r\n  return accessToken; // 토큰 발급\r\n};\r\n\r\n// 리액트에서 api 서버 호출\r\nexport const getUserWithAccessToken = async (accessToken) => {\r\n  const res = await axios.get(`${API_SERVER_HOST}/api/user/kakao?accessToken=${accessToken}`);\r\n\r\n  return res.data;\r\n};","// 로그인 관련 커스텀 훅\r\nimport { Navigate, useNavigate, createSearchParams } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { loginPostAsync, logout } from '../slices/loginSlice';\r\n\r\nconst useCustomLogin = () => {\r\n  const navigate = useNavigate();\r\n  const dispatch = useDispatch();\r\n\r\n  const loginState = useSelector((state) => state.loginSlice); // 로그인 상태\r\n\r\n  const isLogin = loginState.email ? true : false; // 로그인 여부\r\n\r\n  // 로그인 함수\r\n  const doLogin = async (loginParam) => {\r\n    const action = await dispatch(loginPostAsync(loginParam));\r\n    return action.payload;\r\n  };\r\n\r\n  // 로그아웃 함수\r\n  const doLogout = () => {\r\n    dispatch(logout());\r\n  };\r\n\r\n  // 페이지 이동\r\n  const moveToPath = (path) => {\r\n    navigate({ pathname: path }, { replace: true });\r\n  };\r\n\r\n  //로그인 페이지로 이동\r\n  const moveToLogin = () => {\r\n    navigate({ pathname: '/user/login' }, { replace: true });\r\n  };\r\n\r\n  const moveToJoin = () => {\r\n    navigate({ pathname: '/user/join' }, { replace: true });\r\n  }\r\n\r\n  //로그인 페이지로 이동 컴포넌트\r\n  const moveToLoginReturn = () => {\r\n    return <Navigate replace to=\"/user/login\" />;\r\n  };\r\n\r\n  // 토큰에 따른 예외 처리\r\n  const exceptionHandle = (ex) => {\r\n    console.log('Exception-----------------');\r\n    console.log(ex);\r\n\r\n    const errorMsg = ex.response.data.error;\r\n    const errorStr = createSearchParams({ error: errorMsg }).toString();\r\n\r\n    if (errorMsg === 'REQUIRE_LOGIN') {\r\n      alert('로그인 해야만 합니다.');\r\n      navigate({ pathname: '/user/login', search: errorStr }); // 로그인 페이지로 이동\r\n      return;\r\n    }\r\n\r\n    if (ex.response.data.error === 'ERROR_ACCESSDENIED') {\r\n      alert('해당메뉴를 사용할 수 있는 권한이 없습니다.');\r\n      navigate({ pathname: '/', search: errorStr }); // 홈으로 이동\r\n      return;\r\n    }\r\n  };\r\n\r\n  return {\r\n    loginState,\r\n    isLogin,\r\n    doLogin,\r\n    doLogout,\r\n    moveToPath,\r\n    moveToLogin,\r\n    moveToLoginReturn,\r\n    exceptionHandle,\r\n    moveToJoin\r\n  };\r\n};\r\n\r\nexport default useCustomLogin;\r\n","import { useEffect } from 'react';\r\nimport { useSearchParams } from 'react-router-dom';\r\nimport { getAccessToken, getUserWithAccessToken } from '../../api/kakaoApi';\r\nimport { useDispatch } from 'react-redux';\r\nimport { login } from '../../slices/loginSlice';\r\nimport useCustomLogin from '../../hooks/useCustomLogin';\r\n\r\n// 인가 코드의 페이지 처리\r\n\r\nconst KakaoRedirectPage = (props) => {\r\n  const [searchParams] = useSearchParams();\r\n\r\n  const { moveToPath } = useCustomLogin();\r\n\r\n  const authCode = searchParams.get('code');\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  // 카카오 api에 있는 데이터 호출\r\n  useEffect(() => {\r\n    getAccessToken(authCode).then((accessToken) => {\r\n      getUserWithAccessToken(accessToken).then((userInfo) => {\r\n        console.log('----------------------------');\r\n        console.log(userInfo);\r\n        dispatch(login(userInfo));\r\n\r\n        // 로그인 후 회원이 소셜로그인으로 들어온 경우, 회원 정보 수정 페이지로 이동(향후에 수정해야됨)\r\n        if (userInfo) {\r\n          moveToPath('/');\r\n        } else {\r\n          moveToPath('/user/login');\r\n        }\r\n      });\r\n    });\r\n  }, [authCode]);\r\n\r\n  // result JSON 데이터 및 로그인했을 때 나왔던 정보\r\n\r\n  return (\r\n    <div>\r\n      <div>kakao Login Redirect</div>\r\n      {/* <div>{authCode}</div> */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default KakaoRedirectPage;\r\n"],"names":["rest_api_key","redirect_uri","getKakaoLoginLink","concat","getAccessToken","async","params","grant_type","client_id","code","authCode","axios","post","headers","data","access_token","getUserWithAccessToken","get","API_SERVER_HOST","accessToken","useCustomLogin","navigate","useNavigate","dispatch","useDispatch","loginState","useSelector","state","loginSlice","isLogin","email","doLogin","loginPostAsync","loginParam","payload","doLogout","logout","moveToPath","path","pathname","replace","moveToLogin","moveToLoginReturn","_jsx","Navigate","to","exceptionHandle","ex","console","log","errorMsg","response","error","errorStr","createSearchParams","toString","alert","search","moveToJoin","props","searchParams","useSearchParams","useEffect","then","userInfo","login","children"],"sourceRoot":""}