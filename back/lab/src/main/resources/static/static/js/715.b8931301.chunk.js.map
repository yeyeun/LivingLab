{"version":3,"file":"static/js/715.b8931301.chunk.js","mappings":"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","sources":["api/chatApi.js","components/myPage/myChat/ChatList.js","components/myPage/myChat/ChatMessage.js","components/myPage/myChat/ChatInput.js","components/myPage/myChat/ChatWindow.js","pages/myPage/chat/MyChatPage.js"],"sourcesContent":["import axios from 'axios';\r\nexport const API_SERVER_HOST = 'http://223.130.157.92:22222';\r\n\r\nconst host = `${API_SERVER_HOST}/chat`;\r\n\r\n// 작성자가 게시글 작성 시 자동으로 채팅방 생성, 입장\r\nexport const postCreateRoom = async (userId, title, type, createRequest) => {\r\n  const res = await axios.post(`${host}/room/create`, createRequest, {\r\n    params: { userId, title, type }\r\n  });\r\n  return res.data;\r\n};\r\n\r\n// 특정 채팅방 삭제\r\nexport const deleteChatRoom = async (roomId) => {\r\n  const res = await axios.delete(`${host}/room/delete/${roomId}`);\r\n  return res.data;\r\n};\r\n\r\n// 채팅 기록 조회\r\nexport const getChatHistory = async (roomId) => {\r\n  const res = await axios.get(`${host}/room/history/${roomId}`);\r\n  return res.data;\r\n};\r\n\r\n// 유저의 모든 채팅방 목록 반환\r\nexport const getChatRoom = async (userId) => {\r\n  const res = await axios.get(`${host}/rooms`, { params: { userId } });\r\n  return res.data;\r\n};\r\n\r\n// 공동구매 채팅방의 유저 조회(참여하기 표시)\r\nexport const chatUserInfoBuy = async (buyNo) => {\r\n  const res = await axios.get(`${host}/room/buy/get`, {\r\n    params: { buyNo }\r\n  });\r\n  return res.data;\r\n};\r\n\r\n// 공동구매 채팅방 입장(참여)\r\nexport const enterChatRoomBuy = async (formData) => {\r\n  const response = await axios.post(`${host}/room/buy/enter`, formData);\r\n      return response.data;\r\n};\r\n\r\n// 공동구매 채팅방 퇴장(참여x)\r\nexport const exitChatRoomBuy = async (formData) => {\r\n  const response = await axios.post(`${host}/room/buy/exit`, formData);\r\n      return response.data;\r\n};\r\n\r\n// 동네모임 채팅방의 유저 조회(참여하기 표시)\r\nexport const chatUserInfoTeam = async (teamNo) => {\r\n  const res = await axios.get(`${host}/room/team/get`, {\r\n    params: { teamNo }\r\n  });\r\n  return res.data;\r\n};\r\n\r\n// 동네모임 채팅방 입장(참여)\r\nexport const enterChatRoomTeam = async (formData) => {\r\n  const response = await axios.post(`${host}/room/team/enter`, formData);\r\n      return response.data;\r\n};\r\n\r\n// 동네모임 채팅방 퇴장(참여x)\r\nexport const exitChatRoomTeam = async (formData) => {\r\n  const response = await axios.post(`${host}/room/team/exit`, formData);\r\n      return response.data;\r\n};\r\n\r\n\r\n\r\n\r\n\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { getChatRoom } from '../../../api/chatApi';\r\n\r\nconst ChatList = ({ onSelectChat }) => {\r\n  const [ chatRooms, setChatRooms ] = useState('');\r\n  const loginInfo = useSelector((state) => state.loginSlice);\r\n  const id = loginInfo.id;\r\n\r\n  useEffect(()=>{\r\n    getChatRoom(id).then((response) => {\r\n      setChatRooms(response);\r\n    });\r\n  }, [id]);\r\n\r\n\r\n  return (\r\n    <div className=\"h-full\">\r\n      {chatRooms.data && chatRooms.data.length > 0 ? (\r\n      chatRooms.data.map((room) => \r\n\r\n        <div key={room.roomId} className=\"py-7 px-5 cursor-pointer hover:bg-gray-100 border-b flex items-center\" onClick={() => onSelectChat(room)}>\r\n          <img src=\"https://via.placeholder.com/40\" alt=\"...\" className=\"w-10 h-10 rounded-full mr-4\" />\r\n          <div>\r\n            <h2 className=\"text-lg font-bold\">{room.title}</h2>\r\n            <p className=\"text-sm text-gray-500\">채팅방 마지막 메세지</p>\r\n          </div>\r\n        </div>\r\n        \r\n      )\r\n    )\r\n    :\r\n    (\r\n      <div className=\"p-7 flex items-center\">\r\n        참여 중인 채팅방이 없습니다\r\n      </div>\r\n    )\r\n    }\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatList;\r\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\n\r\nconst ChatMessage = ({ message }) => {\r\n  const { sender, message: content } = message; // message 객체에서 sender와 content 추출\r\n  const loginInfo = useSelector((state) => state.loginSlice);\r\n  const { nickname } = loginInfo; \r\n\r\n    return (\r\n      <div>\r\n        {message.sender === nickname ? (\r\n          <div className=\"flex justify-end\">\r\n            <div className=\"px-4 py-2 m-1 rounded-3xl text-lg bg-mainColor text-white shadow\">{content}</div>\r\n          </div>\r\n        )\r\n        :\r\n          (\r\n            <div className=\"relative\">\r\n              <span className=\"absolute top-1.5 left-14 text-sm text-gray-500 transform -translate-y-full ml-2\">{message.sender}</span>\r\n              <div className=\"flex justify-start items-center ml-2 mt-3\">\r\n                <img src=\"https://via.placeholder.com/40\" alt=\"Profile\" className=\"rounded-full w-10 h-10\" />\r\n                <div className=\"px-4 py-2 m-2 rounded-3xl text-lg bg-white text-black shadow\">{content}</div>\r\n              </div>\r\n            </div>\r\n          )\r\n      }\r\n      </div>\r\n    );\r\n  };\r\n\r\nexport default ChatMessage;\r\n","import React, { useState } from 'react';\r\n\r\nconst ChatInput = ({ onSend }) => {\r\n  const [message, setMessage] = useState('');\r\n\r\n  const handleChange = (e) => {\r\n    setMessage(e.target.value);\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (message.trim() === '') return; // 메시지가 비어있으면 전송하지 않음\r\n    onSend(message); // 부모 컴포넌트로부터 전달받은 onSend 함수 호출\r\n    setMessage(''); // 메시지 입력창 초기화\r\n  };\r\n\r\n  // const handleSend = (e) => {\r\n  //   e.preventDefault();\r\n  //   if (message.trim()) {\r\n  //     onSend(message);\r\n  //     setMessage('');\r\n  //   }\r\n  // };\r\n\r\n  // const onKeyDown = (e) => {\r\n  //   if (e.key === 'Enter') {\r\n  //     handleSend(e);\r\n  //   }\r\n  // }\r\n\r\n    return (\r\n      <form onSubmit={handleSubmit} className=\"flex p-4 bg-white border-t rounded-b\">\r\n        <input\r\n          type=\"text\"\r\n          value={message}\r\n          onChange={handleChange}\r\n          // onKeyDown={onKeyDown}\r\n          className=\"flex-1 p-2 border rounded-3xl text-base\"\r\n          placeholder=\"메시지를 입력하세요\"\r\n        />\r\n        <button type=\"submit\" className=\"ml-2 p-2 bg-teal-400 hover:bg-teal-500 text-white rounded-lg text-base\">\r\n          보내기\r\n        </button>\r\n      </form>\r\n    );\r\n  };\r\n\r\nexport default ChatInput;\r\n","import React, { useState, useEffect } from 'react';\r\nimport ChatMessage from './ChatMessage';\r\nimport ChatInput from './ChatInput';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport SockJS from 'sockjs-client';\r\nimport Stomp from 'webstomp-client';  // Stomp.js의 브라우저 버전인 webstomp-client 사용\r\nimport { useSelector } from 'react-redux';\r\nimport { getChatHistory } from '../../../api/chatApi';\r\n\r\nconst initState = {\r\n  id: 0,\r\n  text: '',\r\n  sender: '',\r\n};\r\n\r\nconst ChatWindow = ({ room }) => {\r\n  const navigate = useNavigate();\r\n  //const [messages, setMessages] = useState(initState);\r\n  // const [messages, setMessages] = useState([\r\n  //   { id: 1, text: '안녕!', sender: 'other' },\r\n  //   { id: 2, text: '오랜만이야', sender: 'other' },\r\n  //   { id: 3, text: '잘 지내?', sender: 'me' },\r\n  // ]);\r\n  const [stompClient, setStompClient] = useState(null);\r\n  const [messages, setMessages] = useState([]);\r\n  const [isSidebarOpen, setIsSidebarOpen] = useState(false);\r\n  const loginInfo = useSelector((state) => state.loginSlice);\r\n  const nickname = loginInfo.nickname;\r\n\r\n  useEffect(() => {\r\n    const socket = new SockJS('http://223.130.157.92:22222/ws'); // SockJS 연결 URL\r\n    const stomp = Stomp.over(socket);\r\n\r\n    stomp.connect({}, frame => {\r\n      console.log('연결: ' + frame);\r\n      setStompClient(stomp);\r\n    }, error => {\r\n      console.error('연결 에러: ', error);\r\n    });\r\n\r\n    return () => {\r\n      if (stompClient) stompClient.disconnect();\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const fetchChatHistory = async () => {\r\n      try {\r\n        const res = await getChatHistory(room.roomId); // 수정된 API 호출\r\n        setMessages(res.data.messageHistory);\r\n      } catch (error) {\r\n        console.error('채팅 기록 불러오기 실패: ', error);\r\n      }\r\n    };\r\n\r\n    // 의존성 배열에 chat.roomId 추가하여 해당 값이 변경될 때만 호출\r\n    fetchChatHistory();\r\n  }, [room.roomId]);\r\n\r\n  useEffect(() => {\r\n    if (!stompClient) return;\r\n\r\n    // 채팅방 topic을 구독하여 메시지 수신\r\n    const subscription = stompClient.subscribe(`/topic/chat/room/${room.roomId}`, message => {\r\n      const receivedMessage = JSON.parse(message.body);\r\n      console.log('받은 메시지:', receivedMessage);\r\n      setMessages(prevMessages => [...prevMessages, receivedMessage]);\r\n    }, error => {\r\n      console.error('구독 실패: ', error);\r\n    });\r\n\r\n    return () => {\r\n      subscription.unsubscribe();\r\n    };\r\n  }, [stompClient, room.roomId]);\r\n\r\n  // const handleSend = (message) => {\r\n  //   setMessages([...messages, { id: messages.length + 1, text: message, sender: 'me' }]);\r\n  // };\r\n\r\n  const handleSend = (message) => {\r\n    if (!stompClient || !message) return;\r\n\r\n    const newMessage = {\r\n      type: 'TALK',\r\n      roomId: room.roomId,\r\n      message: message,\r\n      sender: nickname,\r\n      userId: loginInfo.id\r\n    };\r\n\r\n    console.log('보낸 메세지: ', newMessage);\r\n\r\n    // WebSocket을 통해 메시지 전송\r\n    stompClient.send('/app/chat/message', JSON.stringify(newMessage), {});\r\n  };\r\n\r\n  const toggleSidebar = () => {\r\n    setIsSidebarOpen(!isSidebarOpen);\r\n  };\r\n\r\n  const getRoomInfo = (data) => {\r\n    if (data.buyNo) return { value: data.buyNo };\r\n    if (data.teamNo) return { value: data.teamNo };\r\n    if (data.marketNo) return { value: data.marketNo };\r\n    if (data.roomNo) return { value: data.roomNo };\r\n    return { value: '' };\r\n  };\r\n\r\n  const { value } = getRoomInfo(room);\r\n\r\n  //채팅방 제목 클릭시 해당 게시물로 이동\r\n  const handleClickTitle = (type, value) => {\r\n    if (type === '공동구매' && value) {\r\n      navigate(`/buy/read/${value}`);\r\n    }\r\n    else if (type === '동네모임' && value) {\r\n      navigate(`/team/read/${value}`);\r\n    }\r\n    else if (type === '동네장터' && value) {\r\n      navigate(`/market/read/${value}`);\r\n    }\r\n    else if (type === '자취방쉐어' && value) {\r\n      navigate(`/shareRoom/read/${value}`);\r\n    }\r\n    else {\r\n      alert('삭제된 게시물입니다');\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"flex flex-col h-full\">\r\n      <div className=\"flex items-center justify-between p-4 bg-gray-600 text-white rounded-t\">\r\n        {/* 채팅방 정보 표시 */}\r\n        <div className=\"text-sm flex items-center\">\r\n          <span className=\"bg-mainColor px-2 py-1 mr-1 rounded-2xl\">{room.type}</span>\r\n          <span className=\"hover:underline cursor-pointer\" onClick={() => handleClickTitle(room.type, value)}>{room.title} / 채팅방번호:{room.roomId}</span>\r\n        </div>\r\n        {/* 사이드바 토글 버튼 */}\r\n        <div className=\"text-sm flex items-center\">\r\n          <span className=\"bg-white px-2 py-1 ml-1 rounded text-black font-bold\">3명 참여중</span>\r\n          <button\r\n            onClick={toggleSidebar}\r\n            className=\"ml-2 bg-gray-700 hover:bg-gray-500 text-white rounded-full w-8 h-8 flex items-center justify-center\">\r\n            ☰\r\n          </button>\r\n        </div>\r\n      </div>\r\n      {/* 메시지 목록 표시 영역 */}\r\n      <div className=\"flex-1 overflow-y-auto p-2 bg-slate-100 relative overflow-x-hidden\">\r\n        {messages.map((message, index) => (\r\n          <ChatMessage key={index} message={message} />\r\n        ))}\r\n        {/* 참여자 목록 사이드바 */}\r\n        <div\r\n          className={`absolute top-0 right-0 h-full bg-white shadow-lg transition-transform transform ${isSidebarOpen ? 'translate-x-0' : 'translate-x-full'\r\n            } w-1/3`}\r\n        >\r\n          <div className=\"p-4 border-b\">\r\n            <h2 className=\"text-base font-bold\">참여자 목록</h2>\r\n            <button\r\n              onClick={toggleSidebar}\r\n              className=\"absolute top-2 right-2 text-gray-600 hover:text-gray-900\">\r\n              &times;\r\n            </button>\r\n          </div>\r\n          <div className=\"p-4 text-base\">\r\n            <ul>\r\n              <li>참여자 1</li>\r\n              <li>참여자 2</li>\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      {/* 메시지 입력창 */}\r\n      <ChatInput onSend={handleSend} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatWindow;\r\n","import { useState } from 'react';\r\n\r\nimport ChatList from '../../../components/myPage/myChat/ChatList';\r\nimport ChatWindow from '../../../components/myPage/myChat/ChatWindow';\r\n\r\nconst MyChatPage = () => {\r\n  const [selectedChat, setSelectedChat] = useState(null);\r\n\r\n  const handleChatSelect = (room) => {\r\n    setSelectedChat(room);\r\n  };\r\n\r\n  return (\r\n    <div className=\"text-xl flex-grow h-screen flex w-4/5\">\r\n      <div className=\"bg-white w-full rounded h-4/5 shadow-md flex flex-col\">\r\n\r\n        <div className=\"flex-grow flex flex-col h-full\">\r\n          <div id=\"chatall\" className=\"flex-grow flex h-0\">\r\n            <div className=\"w-1/3 overflow-y-auto no-scrollbar\">\r\n              <ChatList onSelectChat={handleChatSelect} />\r\n            </div>\r\n            <div className=\"w-2/3\">\r\n              {selectedChat ? (\r\n                <ChatWindow room={selectedChat}/>\r\n              ) : (\r\n                <div id=\"chatwin\" className=\"flex items-center justify-center h-full border-l border-gray-300\">\r\n                  <p className=\"text-gray-600\">채팅 목록 중 채팅할 방을 선택하세요</p>\r\n                </div>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n      </div>\r\n    </div>\r\n\r\n  );\r\n};\r\n\r\nexport default MyChatPage;\r\n"],"names":["host","concat","postCreateRoom","async","userId","title","type","createRequest","axios","post","params","data","getChatHistory","get","roomId","getChatRoom","chatUserInfoBuy","buyNo","enterChatRoomBuy","formData","exitChatRoomBuy","chatUserInfoTeam","teamNo","enterChatRoomTeam","exitChatRoomTeam","_ref","onSelectChat","chatRooms","setChatRooms","useState","id","useSelector","state","loginSlice","useEffect","then","response","_jsx","className","children","length","map","room","_jsxs","onClick","src","alt","message","sender","content","loginInfo","nickname","onSend","setMessage","onSubmit","e","preventDefault","trim","value","onChange","target","placeholder","navigate","useNavigate","stompClient","setStompClient","messages","setMessages","isSidebarOpen","setIsSidebarOpen","socket","SockJS","stomp","Stomp","connect","frame","console","log","error","disconnect","res","messageHistory","fetchChatHistory","subscription","subscribe","receivedMessage","JSON","parse","body","prevMessages","unsubscribe","toggleSidebar","marketNo","roomNo","handleClickTitle","alert","index","ChatMessage","ChatInput","newMessage","send","stringify","MyChatPage","selectedChat","setSelectedChat","ChatList","ChatWindow"],"sourceRoot":""}